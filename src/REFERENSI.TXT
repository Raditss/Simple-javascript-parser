Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break continue pass def return range raise class from import as with
Variables:
SS NL ALPHABET DIGIT OTHER SYNTAX BODY SERU HASHTAG PERSEN NBO NBC MUL PLUS MIN COMMA POW DIVIDE DIV COLON LESS EQUAL GREAT SBO SBC UNDERSCORE CBO CBC PETIK1 PETIK2 ALPHANUM STRING_WORD VAR_FIRST VAR VALUE NUMBER VV BOOLEAN OP EXPRESSION RELATION STRING ARRAY RANGE DICT_CONTENT DICT COMMENT IF_HEADER IF ELIF_HEADER ELIF ELSE WHILE WHILE_HEADER FOR_HEADER FOR FOR_VAR ITERABLE ITERATE CONTINUE BREAK PASS DEF_HEADER DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC RAISE CLASS CLASS_HEADER CLASS_S IMP_S IMPORT WITH WITH_HEADER FUNCTION NONES ANDS ORS ISS INS TRUES FALSES NOTS FORS IFS ELIFS ELSES WHILES BREAKS CONTINUES DEFS RETURNS RANGES RAISES CLASSS FROMS IMPORTS ASS WITHS
Productions:
SS -> SS NL SS | NL SS | SS NL | IF | WHILE | FOR | CLASS | DEF | IMPORT | RAISE | COMMENT | BREAK | FUNCTION | CONTINUE | WITH | PASS | VAR EQUAL VV | VAR OP EQUAL VV | NONES | VV;



SYNTAX -> NONES | ANDS | ORS | ISS | INS | TRUES | FALSES | NOTS | FORS | IFS | ELIFS | ELSES | WHILES | BREAKS | CONTINUES | DEFS | RETURNS | RANGES | RAISES | CLASSS | FROMS | IMPORTS | ASS | WITHS | PASS;
NL -> NL NL | newline;
VAR_FIRST -> ALPHABET | UNDERSCORE;
ALPHANUM -> ALPHANUM ALPHANUM | DIGIT | VAR_FIRST;
VAR -> VAR_FIRST ALPHANUM | VAR_FIRST;
NUMBER -> NUMBER NUMBER | DIGIT;
STRING_WORD -> STRING_WORD STRING_WORD | ALPHABET | DIGIT | OTHER | SYNTAX;
VALUE -> NUMBER | BOOLEAN | STRING | ARRAY | DICT | FUNCTION | VV OP VV | NBO VV NBC | NONES;
VV -> VV COMMA VV | VALUE | VAR | VV IFS EXPRESSION ELSES VV;
BOOLEAN -> BOOLEAN ANDS BOOLEAN | BOOLEAN ORS BOOLEAN | NOTS BOOLEAN | VV RELATION VV | TRUES | FALSES | NBO BOOLEAN NBC | VALUE | VAR;
OP -> PLUS | MIN | MUL | DIVIDE | DIV | POW | PERSEN;
EXPRESSION -> BOOLEAN | NBO BOOLEAN NBC;
RELATION -> GREAT EQUAL | LESS EQUAL | EQUAL EQUAL | SERU EQUAL | LESS | GREAT | ISS | ISS NOTS | INS | NOTS INS;
STRING -> STRING STRING | PETIK2 STRING_WORD PETIK2 | PETIK1 STRING_WORD PETIK1;
ARRAY -> SBO VV SBC | SBO SBC | SBO VV FORS VAR INS VV SBC | SBO VV FORS VAR INS RANGE SBC | VAR SBO VV SBC;
RANGE -> RANGES NBO VV NBC;
DICT -> CBO CBC | CBO DICT_CONTENT CBC | VAR SBO VV SBC;
DICT_CONTENT -> VV COLON VV | DICT_CONTENT , DICT_CONTENT;
BODY -> STRING_WORD | BODY NL BODY | NL BODY | BODY NL;
COMMENT -> PETIK2 PETIK2 PETIK2 BODY PETIK2 PETIK2 PETIK2 | PETIK1 PETIK1 PETIK1 BODY PETIK1 PETIK1 PETIK1 | HASHTAG BODY NL;
IF_HEADER -> IFS EXPRESSION COLON NL;
IF -> IF_HEADER SS | IF NL ELIF | IF NL ELSE | IF_HEADER BREAKS NL SS | IF_HEADER CONTINUES NL SS | IF_HEADER BREAKS | IF_HEADER CONTINUES;
ELIF_HEADER -> ELIFS EXPRESSION COLON NL;
ELIF -> ELIF_HEADER SS | ELIF NL ELIF | ELIF NL ELSE | ELIF_HEADER BREAKS NL SS | ELIF_HEADER CONTINUES NL SS | ELIF_HEADER BREAKS | ELIF_HEADER CONTINUES;
ELSE -> ELSES COLON NL SS | ELSES COLON NL BREAKS | ELSES COLON NL CONTINUES | ELSES COLON NL BREAKS NL SS | ELSES COLON NL CONTINUES NL SS;
WHILE_HEADER -> WHILES EXPRESSION COLON NL;
WHILE -> WHILE_HEADER SS;
FOR_HEADER -> FORS FOR_VAR INS ITERABLE COLON NL;
FOR_VAR -> VAR | VAR COMMA FOR_VAR;
ITERABLE -> RANGE | NBO DICT NBC | DICT | NBO ARRAY NBC | ARRAY | STRING | FUNCTION;
FOR -> FOR_HEADER SS;
ITERATE -> FOR_HEADER | WHILE_HEADER | FOR | WHILE;
BREAK -> ITERATE BREAKS | ITERATE BREAKS NL SS;
CONTINUE -> ITERATE CONTINUES | ITERATE CONTINUES NL SS;
PASS -> pass;
FUNCTION -> VAR NBO VV NBC | VAR NBO NBC;
DEF_HEADER -> DEFS VAR NBO VV NBC COLON NL | DEFS VAR NBO NBC COLON NL;
DEF_S -> DEF_S NL DEF_S | DEF_S NL | FUNC_BODY;
FUNC_BODY -> FUNC_BODY NL FUNC_BODY | FUNC_BODY NL | IF_FUNC | FOR_FUNC | WHILE_FUNC | CONTINUE_FUNC | BREAK_FUNC | CLASS | DEF | VAR EQUAL VV | VAR OP EQUAL VV | IMPORT | FUNCTION | RAISE | WITH_FUNC | PASS | RETURN | COMMENT | NONES;
DEF -> DEF_HEADER DEF_S | DEF_HEADER FUNC_BODY;
RETURN -> RETURNS BOOLEAN | RETURNS VV | RETURNS;
IF_FUNC -> IF_HEADER FUNC_BODY | IF_FUNC NL ELIF_FUNC | IF_FUNC NL ELSE_FUNC | IF_HEADER BREAKS NL FUNC_BODY | IF_HEADER CONTINUES NL FUNC_BODY | IF_HEADER BREAKS | IF_HEADER CONTINUES;
ELIF_FUNC -> ELIF_HEADER FUNC_BODY | ELIF_FUNC NL ELIF_FUNC | ELIF_FUNC NL ELSE_FUNC | ELIF_HEADER BREAKS NL FUNC_BODY | ELIF_HEADER CONTINUES NL FUNC_BODY | ELIF_HEADER BREAKS | ELIF_HEADER CONTINUES;
ELSE_FUNC -> ELSES COLON NL FUNC_BODY | ELSES COLON NL BREAKS | ELSES COLON NL CONTINUES | ELSES COLON NL BREAKS NL FUNC_BODY | ELSES COLON NL CONTINUES NL FUNC_BODY;
FOR_FUNC -> FOR_HEADER FUNC_BODY;
WHILE_FUNC -> WHILE_HEADER FUNC_BODY;
ITERATE_FUNC -> FOR_FUNC | WHILE_FUNC | WHILE_HEADER | FOR_HEADER;
CONTINUE_FUNC -> ITERATE_FUNC CONTINUES | ITERATE_FUNC CONTINUES NL FUNC_BODY;
BREAK_FUNC -> ITERATE_FUNC BREAKS | ITERATE_FUNC BREAKS NL FUNC_BODY;
WITH_FUNC -> WITH_HEADER FUNC_BODY;
RAISE -> RAISES FUNCTION | RAISES NBO NBC;
CLASS_HEADER -> CLASSS VAR COLON NL | CLASSS VAR NBO VV NBC COLON NL | CLASSS VAR NBO NBC COLON NL;
CLASS_S -> CLASS_S NL CLASS_S | CLASS_S NL | IF | WHILE | FOR | CLASS | DEF | FUNCTION | VAR EQUAL VV | VAR OP EQUAL VV | BREAK | CONTINUE | PASS | COMMENT;
CLASS -> CLASS_HEADER CLASS_S;


WITH_HEADER -> WITHS FUNCTION ASS VAR COLON NL;
WITH -> WITH_HEADER SS;


























ISS -> is;
INS -> in;










RANGES -> range;
DEFS -> def;

CLASSS -> class;
RAISES -> raise;



WITHS -> with